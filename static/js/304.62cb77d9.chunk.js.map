{"version":3,"file":"static/js/304.62cb77d9.chunk.js","mappings":"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","sources":["components/CharactersList/CharactersList.js","components/FilterInput/FilterInput.js","utils/getUsersIdArr.js","pages/Home/Home.js","hooks/useLocalStorage.js","services/apiService.js"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\nimport routes from 'utils/routes';\n\nconst CharactersList = ({ users }) => {\n  // console.log('users :', users);\n  const { pathname, search } = useLocation();\n\n  return (\n    <>\n      {users.length > 0 ? (\n        <ul>\n          {users.map(({ id, name }) => (\n            <li key={id}>\n              <NavLink\n                to={`${routes.home}${id}`}\n                state={{ prevLocationPath: pathname + search }}\n              >\n                {name}\n              </NavLink>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Not found characters</p>\n      )}\n    </>\n  );\n};\n\nexport default CharactersList;\n","const FilterInput = ({ onChangeFilter, filter }) => {\n  // const onChange = e => {\n  //   const value = e.target.value;\n\n  //   onChangeFilter(value);\n  // };\n  return (\n    <form action=\"\">\n      <input\n        type=\"text\"\n        placeholder=\"Filter by name...\"\n        name=\"filter\"\n        onInput={onChangeFilter}\n        value={filter}\n      />\n    </form>\n  );\n};\n\nexport default FilterInput;\n","export const getUsersIdArr = totalUsers => {\n  const countArrsUserId = Math.ceil(totalUsers / 8);\n  let arrWithArrsUsersId = Array.from(\n    { length: countArrsUserId },\n    el => (el = [])\n  );\n\n  let indexArr = 0;\n  for (let i = 1; i <= totalUsers; i++) {\n    arrWithArrsUsersId[indexArr].push(i);\n    if (arrWithArrsUsersId[indexArr].length === 8) {\n      indexArr += 1;\n    }\n  }\n\n  return arrWithArrsUsersId;\n};\n\nexport const getUsersIdArrByName = arrWithUsers => {\n  const countArrsUserId = Math.ceil(arrWithUsers.length / 8);\n  let arrWithArrsUsersId = Array.from(\n    { length: countArrsUserId },\n    el => (el = [])\n  );\n\n  let indexArr = 0;\n  for (let i = 0; i < arrWithUsers.length; i++) {\n    const el = arrWithUsers[i].id;\n    arrWithArrsUsersId[indexArr].push(el);\n\n    if (arrWithArrsUsersId[indexArr].length === 8) {\n      indexArr += 1;\n    }\n  }\n\n  return arrWithArrsUsersId;\n};\n","import { Pagination } from '@mui/material';\nimport CharactersList from 'components/CharactersList/CharactersList';\nimport FilterInput from 'components/FilterInput/FilterInput';\nimport Loader from 'components/Loader/Loader';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport {\n  fetchCHaracter,\n  fetchCHaracterByName,\n  fetchTotalCountUsers,\n} from 'services/apiService';\nimport { getUsersIdArr, getUsersIdArrByName } from 'utils/getUsersIdArr';\nimport logo from '../../assets/images/logo.webp';\n\nconst Home = () => {\n  const [arrWithIds, setArrWithIds] = useState([]);\n  const [page, setPage] = useLocalStorage('page_r&m', 1);\n  const [users, setUsers] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const [filter, setFilter] = useState(query ?? '');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onChangePage = (e, p) => {\n    setPage(p);\n  };\n\n  const onChangeFilter = e => {\n    const value = e.target.value;\n    if (filter) {\n      setSearchParams({ query: value });\n      setPage(1);\n    }\n    setFilter(value);\n  };\n\n  const getArrWithId = async () => {\n    try {\n      const countUsers = await fetchTotalCountUsers();\n      setArrWithIds(getUsersIdArr(countUsers));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCharactersByName = async name => {\n    setIsLoading(true);\n    try {\n      const { data } = await fetchCHaracterByName(name);\n      setUsers(data.results.length ? data.results : [data.results]);\n      setArrWithIds(getUsersIdArrByName(data.results));\n    } catch (err) {\n      setUsers([]);\n      setArrWithIds([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!filter) {\n      getArrWithId();\n    } else {\n      getCharactersByName(filter);\n    }\n  }, [filter]);\n\n  const getAllCharacters = async (arrUsersId, page) => {\n    setIsLoading(true);\n\n    try {\n      const { data } = await fetchCHaracter(arrUsersId, page);\n      setUsers(data.length ? data : [data]);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (arrWithIds.length > 0) {\n      getAllCharacters(arrWithIds[page - 1], page);\n    }\n  }, [arrWithIds, page]);\n\n  return (\n    <>\n      <div>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <FilterInput onChangeFilter={onChangeFilter} filter={filter} />\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <CharactersList users={users} />\n          {arrWithIds.length > 1 && (\n            <Pagination\n              count={arrWithIds.length}\n              page={page}\n              onChange={onChangePage}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key, initialState) => {\n  const [data, setData] = useState(\n    JSON.parse(localStorage.getItem(key)) ?? initialState\n  );\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(data));\n  }, [data, key]);\n\n  return [data, setData];\n};\n","import axios from 'axios';\nconst MAIN_URL = `https://rickandmortyapi.com/api`;\n\naxios.defaults.baseURL = MAIN_URL;\n\nexport async function fetchTotalCountUsers() {\n  try {\n    const resp = await axios.get(`/character`);\n\n    return resp.data.info.count;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchCHaracter(arrUsers, page = 1) {\n  try {\n    const resp = await axios.get(`/character/${arrUsers}?page=${page}\n`);\n\n    return resp;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchCHaracterByName(name) {\n  try {\n    const resp =\n      await axios.get(`/character/?gender=&status=&species=&name=${name}\n`);\n    return resp;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["users","useLocation","pathname","search","length","map","id","name","to","routes","state","prevLocationPath","onChangeFilter","filter","action","type","placeholder","onInput","value","getUsersIdArr","totalUsers","countArrsUserId","Math","ceil","arrWithArrsUsersId","Array","from","el","indexArr","i","push","getUsersIdArrByName","arrWithUsers","useState","arrWithIds","setArrWithIds","key","initialState","JSON","parse","localStorage","getItem","data","setData","useEffect","setItem","stringify","useLocalStorage","page","setPage","setUsers","useSearchParams","searchParams","setSearchParams","query","get","setFilter","isLoading","setIsLoading","getArrWithId","fetchTotalCountUsers","countUsers","console","log","getCharactersByName","fetchCHaracterByName","results","getAllCharacters","arrUsersId","fetchCHaracter","src","logo","alt","e","target","Loader","Pagination","count","onChange","p","axios","resp","info","error","arrUsers"],"sourceRoot":""}